
package jarvis.modules.parsing;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class ParseInterpreter
{
        // Valid user acts:
         // Type(EventType)
         // Inform(SlotType,String)
         // Acknowledge(boolean)
    //public static ArrayList<InformUA> extractInformUA(){
    public static ArrayList<UserAct> run(ParseResult parseResult){
        //TODO:change after refactoring
        
        // extracts the slot values from the utterance
        // returns empty list if no information found
        // TODO: after DialogueState is integrated, return null
        // instead of empty List.
        
        // general semantic extraction
        ArrayList<UtteranceTheme> ideas = getUtteranceThemes(parseResult.getConll());

        // semantic type classification
        classify(ideas, parseResult.getFrames());

        // load most important (classified) values into slots
        ArrayList<UtteranceTheme> leftOvers = new ArrayList<UtteranceTheme>();
        HashMap<String,UtteranceTheme> slots = new HashMap<String,UtteranceTheme>();
        for (UtteranceTheme idea: ideas){
            if (idea.getClassification().equals("WHY")){
                leftOvers.add(idea);
            }
            else {
                slots.put(idea.getClassification(),idea);
            }
        }

        // convert general slots into dialogue specific slots (using DM variables)
        ArrayList<UserAct> extractedInfo = new ArrayList<UserAct>(convert(slots));;
        // type classification
        extractedInfo.add(mainTypeClassification(slots,leftOvers,parseResult.getFrames()));
        // acknowledgement classification
        extractedInfo.add(extractAcknowledgeUA(parseResult));

        return extractedInfo;
    }

    /** Main activity type classification
     * @param slots dictionary of ideas keyed by its classification
     * @param leftOvers list of ideas that are secondary to the utterance
     * @param frames list of frames from parse results
     */
    public static TypeUA mainTypeClassification(HashMap<String,UtteranceTheme> slots,
            List<UtteranceTheme> leftOvers, List<ParseFrame> frames){
        // TODO: refactor up one level so it has access to DM to know
        //  whether this classifier is necessary at the current DM state
        return new TypeUA(EventType.EVENT);
        /*
         * =================================
         * MAIN ACTIVITY TYPE CLASSIFICATION
         * =================================
         * String match the WHAT idea, if nothing, string match frame names,
         *  if nothing, string match the WHY ideas.
         * If still nothing, (CLASSIFICATION: GENERAL_EVENT)
         *
         * Possible things to match
         * statement, speak_on_topic, talk, lecture
         * aggregate, amassing, social_event
         * placing, locative_relation (ie, hanging out)
         * locale_by_use, restaurant, ingestion, eat
         * getting
         * wear, clothing
         *
         *
         * PREVIOUS VERSION:
         public static TypeUA extractTypeUA(ParseResult parseResult){
             // extracts which EventType user mentions
             // returns null if none found
             
             // Uses simple string matching for now
             for (String token: parseResult.getTokens()){
                 String word = token.toLowerCase();
                 for (EventType t: EventType.values()){
                     if (word.equals(t.toString().toLowerCase())){
                         return new TypeUA(t);
                     }
                 }
             }
             return null;
         }
         */
    }

    /** Convert general WHO/WHERE; WHAT; WHEN slots into dialogue-specific slots
     * @param slots dictionary of ideas keyed by its classification
     */
    public static ArrayList<InformUA> convert(HashMap<String,UtteranceTheme> slots){
        // TODO: refactor up one level so it has access to DM
        ArrayList<InformUA> extractedInfo = new ArrayList<InformUA>();
        return extractedInfo;
    }

    /** Semantic type classification based on frames and dependencies
     * @param ideas list of relevant ideas in sentence in order of importance
     * @param frames frame-based parsing results
     */
    public static void classify(ArrayList<UtteranceTheme> ideas, List<ParseFrame> frames){
        /* =============================
         * SEMANTIC TYPE CLASSIFICATION
         * =============================
         * For each idea:
         *  Get set of frames related to this idea.
         *      If 'Calendric_unit' in this set (and WHEN not assigned yet),
         *          If multiple exist, use the largest one
         *              (most coverage of utterance),
         *          Assign (CLASSIFICATION: WHEN) to this idea.
         *          TimeBind this idea to the closest,
         *              earliest (in the idea list), nontemporal idea.
         *          Remove all words in this frame from all ideas
         *          TODO: convert to absolute date(time).
         *      Else If (idea.POS contains NNP) and (WHO/WHERE not assigned yet),
         *          Assign (CLASSIFICATION: WHO/WHERE) to this idea
         *      Else If (CLASSIFICATION: WHAT not assigned yet),
         *          Assign (CLASSIFICATION: WHAT) to this idea
         *              ie, assign leftmost noncalendar/nnp idea to 'what'
         *      Else
         *          Assign (CLASSIFICATION: WHY) to the idea if nothing else
         *
         * TODO: Note that we can recursively analyze ideas classified as WHY
         *          by extracting all WHYs from the list of ideas and reclassifying
         *          them as their own list of ideas.
         */
    }

    /** General semantic extraction from POS and dependencies.
     * @param conll is a ConllParse object containing the POS and DEP
     */
    public static ArrayList<UtteranceTheme> getUtteranceThemes(ConllParse conll){
        /*
         * =============================
         * GENERAL SEMANTIC EXTRACTION
         * =============================
         * Initialize list of ideas
         * BFS starting from root. Sort from closest child on right, 
         *  to furthest child on right, to closest child on left, to furthest
         *  child on left.
         * For each word:
         *  If POS=NN
         *      If ((HEAD.POS==NN)&&(DEPREL==nn||conj))
         *          append idea (extend the phrase, maintain original ordering)
         *      Else If ((HEAD.POS==NN)&&(DEPREL==poss))
         *          PossBind idea (weakly extend the phrase)
         *      Else
         *          add new idea (the noun itself) to list
         *  Else
         *      If ((HEAD.POS==NN)&&(DEPREL==amod))
         *          append idea (extend the phrase, maintain original ordering)
         *      Else
         *          do nothing
         */
        ArrayList<UtteranceTheme> ideas = new ArrayList<UtteranceTheme>();


        return ideas;
    }
    public static AcknowledgeUA extractAcknowledgeUA(ParseResult parseResult){
        // extracts whether the user acknowledges yes/no
        // returns null if neither
        
        // Uses simple string matching
        ArrayList<String> yes = new ArrayList<String>();
        yes.add("yes");
        yes.add("correct");
        yes.add("exactly");
        yes.add("sure");
        yes.add("right");
        ArrayList<String> no = new ArrayList<String>();
        no.add("no");
        no.add("nope");
        no.add("wrong");

        for (String word: parseResult.getTokens()){
            if (yes.contains(word.toLowerCase())){
                return new AcknowledgeUA(true);
            }
            if (no.contains(word.toLowerCase())){
                return new AcknowledgeUA(false);
            }
        }
        return null;
    }
}


